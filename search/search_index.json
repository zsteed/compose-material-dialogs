{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compose Material Dialogs Core Core Documentation dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:core:0.5.2\" ... } Date and Time Picker Date and Time Picker Documentation dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:datetime:0.5.2\" ... } Color Picker Color Picker Documentation dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:color:0.5.2\" ... }","title":"Overview"},{"location":"#compose-material-dialogs","text":"","title":"Compose Material Dialogs"},{"location":"#core","text":"","title":"Core"},{"location":"#core-documentation","text":"dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:core:0.5.2\" ... }","title":"Core Documentation"},{"location":"#date-and-time-picker","text":"","title":"Date and Time Picker"},{"location":"#date-and-time-picker-documentation","text":"dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:datetime:0.5.2\" ... }","title":"Date and Time Picker Documentation"},{"location":"#color-picker","text":"","title":"Color Picker"},{"location":"#color-picker-documentation","text":"dependencies { ... implementation \"io.github.vanpra.compose-material-dialogs:color:0.5.2\" ... }","title":"Color Picker Documentation"},{"location":"ColorPicker/","text":"Color Picker Main Color Picker Here is an example of how to add a color picker to a dialog: val dialogState = rememberMaterialDialogState() MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary) ... } /* This should be called in an onClick or an Effect */ dialogState.show() ColorPalette.Primary is a predefined list of colors and can be replaced with a list of custom colors. Sub Color Picker Here is an example of how to add a color picker with sub colors to a dialog: MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary, subColors = ColorPalette.PrimarySub) ... } The subColors parameter is passed in a list of list of colors which are show to the user when they click on a color from colors list. These lists are matched by the order they appear in the list ie. the first color in colors matches with the first list in subColors ARGB Color Picker Here is an example of how to add a color picker with custom argb selector to a dialog: MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary, allowCustomArgb = true) ... }","title":"Guide"},{"location":"ColorPicker/#color-picker","text":"","title":"Color Picker"},{"location":"ColorPicker/#main-color-picker","text":"Here is an example of how to add a color picker to a dialog: val dialogState = rememberMaterialDialogState() MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary) ... } /* This should be called in an onClick or an Effect */ dialogState.show() ColorPalette.Primary is a predefined list of colors and can be replaced with a list of custom colors.","title":"Main Color Picker"},{"location":"ColorPicker/#sub-color-picker","text":"Here is an example of how to add a color picker with sub colors to a dialog: MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary, subColors = ColorPalette.PrimarySub) ... } The subColors parameter is passed in a list of list of colors which are show to the user when they click on a color from colors list. These lists are matched by the order they appear in the list ie. the first color in colors matches with the first list in subColors","title":"Sub Color Picker"},{"location":"ColorPicker/#argb-color-picker","text":"Here is an example of how to add a color picker with custom argb selector to a dialog: MaterialDialog(dialogState = dialogState) { ... colorPicker(colors = ColorPalette.Primary, allowCustomArgb = true) ... }","title":"ARGB Color Picker"},{"location":"Core/","text":"Core Basic Dialogs Here is an example to make a basic dialog with a title and text: val dialogState = rememberMaterialDialogState() MaterialDialog(dialogState = dialogState) { title(text = \"Use Location Services?\") message(res = R.string.location_dialog_message) } /* This should be called in an onClick or an Effect */ dialog.show() The dialog is shown when the dialog.show() is called. The hard coded strings for all the components in the example above can be replaced with a string resource id. Buttons can be added to the dialog by adding the buttons parameter: MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... } If the text of the buttons is too long to fit in one row the buttons will be automatically stacked on top on one another. Input Dialogs MaterialDialog(dialogState = dialogState, buttons = { ... }) { ... input(label = \"Name\", hint = \"Jon Smith\") { inputString -> /* Do something */ } ... } In the code snippet above creates the dialog seen in the image (without the title). Once an input is entered and the user presses the positive button, the dialog will callback with the string the user inputted. The input function also has other parameters which can be found in the comment above the input function implementation. List Dialogs Below is an example of a plain list dialog: MaterialDialog(dialogState = dialogState) { ... listItems(listOf(\"Item 1\", \"Item 2\", \"Item 3\"), onClick { index, item -> //Do Something }) ... } If you would like to use a custom list item layout you can use the following code: data class TextIcon(text: String, icon: ImageAsset) val items = listOf( TextIcon(\"Item 1\", imageFromResource(R.drawable.item_one)) TextIcon(\"Item 2\", imageFromResource(R.drawable.item_two)) TextIcon(\"Item 3\", imageFromResource(R.drawable.item_three)) ) ... MaterialDialog(dialogState = dialogState) { ... listItems(items, onClick { index, item -> //Do Something }) { Row { Box(Modifier.preferedSize(40.dp)) { Image(it.icon) } Text(it.text, modifier = Modifier.padding(start = 12.dp)) } } ... } Single Choice List MaterialDialog(dialogState = dialogState, buttons = { ... }) { listItemsSingleChoice( list = listOf(\"Item 1\", \"Item 2\", \"Item 3\"), disabledIndices = listOf(1), initialSelection = 2 ) { //Do Something } } As seen in the code snippet above you can pass in a list of indices of items which should be disabled (ie. cannot be selected) and the item index which should selected to start with. By default, if no initial selection is given it will default to the first item. Multiple Choice List MaterialDialog(dialogState = dialogState, buttons = { ... }) { listItemsSingleChoice( list = listOf(\"Item 1\", \"Item 2\", \"Item 3\"), disabledIndices = listOf(1), initialSelection = listOf(1) ) { //Do Something } } As seen in the code snippet above you can select which items will be disabled (ie. cannot be selected) and also a list of item indicies which should be initially selected. Custom View MaterialDialog(dialogState = dialogState, buttons = { ... }) { customView { //Define your view here } } The custom view provides a box with the appropriate material design padding's assigned to it so that your content. If you don't want the padding you can just put your composable anywhere in the dialog.build scope and it will be displayed as normal. Theming The background colour of the dialog can be changed by using the backgroundColor parameter of the build function: MaterialDialog(dialogState = dialogState, buttons = { ... }, backgroundColor = Color.Red) { title(text = \"Use Location Services?\") message(res = R.string.location_dialog_message) } The shape of the dialog is defaulted to the MaterialTheme.shapes.medium property but can also be set using the shape parameter in MaterialDialog .","title":"Guide"},{"location":"Core/#core","text":"","title":"Core"},{"location":"Core/#basic-dialogs","text":"Here is an example to make a basic dialog with a title and text: val dialogState = rememberMaterialDialogState() MaterialDialog(dialogState = dialogState) { title(text = \"Use Location Services?\") message(res = R.string.location_dialog_message) } /* This should be called in an onClick or an Effect */ dialog.show() The dialog is shown when the dialog.show() is called. The hard coded strings for all the components in the example above can be replaced with a string resource id. Buttons can be added to the dialog by adding the buttons parameter: MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... } If the text of the buttons is too long to fit in one row the buttons will be automatically stacked on top on one another.","title":"Basic Dialogs"},{"location":"Core/#input-dialogs","text":"MaterialDialog(dialogState = dialogState, buttons = { ... }) { ... input(label = \"Name\", hint = \"Jon Smith\") { inputString -> /* Do something */ } ... } In the code snippet above creates the dialog seen in the image (without the title). Once an input is entered and the user presses the positive button, the dialog will callback with the string the user inputted. The input function also has other parameters which can be found in the comment above the input function implementation.","title":"Input Dialogs"},{"location":"Core/#list-dialogs","text":"Below is an example of a plain list dialog: MaterialDialog(dialogState = dialogState) { ... listItems(listOf(\"Item 1\", \"Item 2\", \"Item 3\"), onClick { index, item -> //Do Something }) ... } If you would like to use a custom list item layout you can use the following code: data class TextIcon(text: String, icon: ImageAsset) val items = listOf( TextIcon(\"Item 1\", imageFromResource(R.drawable.item_one)) TextIcon(\"Item 2\", imageFromResource(R.drawable.item_two)) TextIcon(\"Item 3\", imageFromResource(R.drawable.item_three)) ) ... MaterialDialog(dialogState = dialogState) { ... listItems(items, onClick { index, item -> //Do Something }) { Row { Box(Modifier.preferedSize(40.dp)) { Image(it.icon) } Text(it.text, modifier = Modifier.padding(start = 12.dp)) } } ... }","title":"List Dialogs"},{"location":"Core/#single-choice-list","text":"MaterialDialog(dialogState = dialogState, buttons = { ... }) { listItemsSingleChoice( list = listOf(\"Item 1\", \"Item 2\", \"Item 3\"), disabledIndices = listOf(1), initialSelection = 2 ) { //Do Something } } As seen in the code snippet above you can pass in a list of indices of items which should be disabled (ie. cannot be selected) and the item index which should selected to start with. By default, if no initial selection is given it will default to the first item.","title":"Single Choice List"},{"location":"Core/#multiple-choice-list","text":"MaterialDialog(dialogState = dialogState, buttons = { ... }) { listItemsSingleChoice( list = listOf(\"Item 1\", \"Item 2\", \"Item 3\"), disabledIndices = listOf(1), initialSelection = listOf(1) ) { //Do Something } } As seen in the code snippet above you can select which items will be disabled (ie. cannot be selected) and also a list of item indicies which should be initially selected.","title":"Multiple Choice List"},{"location":"Core/#custom-view","text":"MaterialDialog(dialogState = dialogState, buttons = { ... }) { customView { //Define your view here } } The custom view provides a box with the appropriate material design padding's assigned to it so that your content. If you don't want the padding you can just put your composable anywhere in the dialog.build scope and it will be displayed as normal.","title":"Custom View"},{"location":"Core/#theming","text":"The background colour of the dialog can be changed by using the backgroundColor parameter of the build function: MaterialDialog(dialogState = dialogState, buttons = { ... }, backgroundColor = Color.Red) { title(text = \"Use Location Services?\") message(res = R.string.location_dialog_message) } The shape of the dialog is defaulted to the MaterialTheme.shapes.medium property but can also be set using the shape parameter in MaterialDialog .","title":"Theming"},{"location":"DateTimePicker/","text":"Date Time Picker Prerequisite The date time picker relies on parts of the java.time API which are only available on Android API levels >= 26. Therefore, in order to make this library backwards comparability with older Android API a few options have to be set in your app/module build.gradle file which enables desugaring: android { ... compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled true // Sets Java compatibility to Java 8 sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } ... } dependencies { ... coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9' } Note, this only has to be done if you intend to target an Android API level < 26. To find out more about desugaring you can check out: https://developer.android.com/studio/write/java8-support#library-desugaring. Documentation Date Picker val dialogState = rememberMaterialDialogState() MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... datepicker { date -> // Do stuff with java.time.LocalDate object which is passed in } } /* This should be called in an onClick or an Effect */ dialogState.show() Time Picker val dialogState = rememberMaterialDialogState() MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... timepicker { time -> // Do stuff with java.time.LocalTime object which is passed in } ... } To Do Limit date selection range (ie. min/max date) Implement Date range selection","title":"Guide"},{"location":"DateTimePicker/#date-time-picker","text":"","title":"Date Time Picker"},{"location":"DateTimePicker/#prerequisite","text":"The date time picker relies on parts of the java.time API which are only available on Android API levels >= 26. Therefore, in order to make this library backwards comparability with older Android API a few options have to be set in your app/module build.gradle file which enables desugaring: android { ... compileOptions { // Flag to enable support for the new language APIs coreLibraryDesugaringEnabled true // Sets Java compatibility to Java 8 sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } ... } dependencies { ... coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9' } Note, this only has to be done if you intend to target an Android API level < 26. To find out more about desugaring you can check out: https://developer.android.com/studio/write/java8-support#library-desugaring.","title":"Prerequisite"},{"location":"DateTimePicker/#documentation","text":"","title":"Documentation"},{"location":"DateTimePicker/#date-picker","text":"val dialogState = rememberMaterialDialogState() MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... datepicker { date -> // Do stuff with java.time.LocalDate object which is passed in } } /* This should be called in an onClick or an Effect */ dialogState.show()","title":"Date Picker"},{"location":"DateTimePicker/#time-picker","text":"val dialogState = rememberMaterialDialogState() MaterialDialog( dialogState = dialogState, buttons = { positiveButton(\"Ok\") negativeButton(\"Cancel\") } ) { ... timepicker { time -> // Do stuff with java.time.LocalTime object which is passed in } ... }","title":"Time Picker"},{"location":"DateTimePicker/#to-do","text":"Limit date selection range (ie. min/max date) Implement Date range selection","title":"To Do"}]}